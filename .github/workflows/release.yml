name: Build and Release

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build:
    name: Build Release Packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller wheel setuptools
    
    - name: Create version file
      run: |
        echo "VERSION = '${{ steps.version.outputs.tag }}'" > src/version.py
      shell: bash
    
    - name: Update setup.py version
      run: |
        VERSION="${{ steps.version.outputs.tag }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        sed -i "s/version='[^']*'/version='$VERSION_NUM'/" setup.py
      shell: bash
    
    - name: Build standalone executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name="AudacityCloudAI-GUI" --icon=assets/icon.ico gui_launcher.py || pyinstaller --onefile --name="AudacityCloudAI-GUI" gui_launcher.py
        pyinstaller --onefile --name="AudacityCloudAI-CLI" audacity_cloudai.py
      continue-on-error: true
    
    - name: Build standalone executable (Linux/Mac)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller --onefile --name="AudacityCloudAI-GUI" gui_launcher.py || echo "GUI build skipped"
        pyinstaller --onefile --name="AudacityCloudAI-CLI" audacity_cloudai.py
      continue-on-error: true
    
    - name: Create distribution package
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip install wheel setuptools
        python setup.py sdist bdist_wheel
      continue-on-error: true
    
    - name: Install Inno Setup
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Installing Inno Setup..."
        choco install innosetup -y --no-progress
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Failed to install Inno Setup via Chocolatey"
          exit 1
        }
        Write-Host "Inno Setup installed successfully"
      shell: pwsh
    
    - name: Build Windows Installer
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Building Windows installer..."
        
        # Update version in installer.iss
        $version = "${{ steps.version.outputs.tag }}"
        $versionNum = $version -replace '^v', ''
        $issPath = "installer\windows\installer.iss"
        (Get-Content $issPath) -replace '#define MyAppVersion ".*"', "#define MyAppVersion `"$versionNum`"" | Set-Content $issPath
        Write-Host "Updated installer version to $versionNum"
        
        # Build installer
        cd installer/windows
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Failed to build installer"
          exit 1
        }
        Write-Host "Installer built successfully!"
        
        # Move installer to root for easier artifact upload
        cd ..\..
        if (Test-Path "dist\*.exe") {
          Copy-Item "dist\*.exe" "." -Force
          Get-ChildItem "*.exe" | ForEach-Object { Write-Host "Created: $($_.Name)" }
        }
      shell: pwsh
    
    - name: Build Linux .deb Package
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd installer/linux
        chmod +x build_deb.sh
        ./build_deb.sh || echo "Deb build skipped"
      continue-on-error: true
    
    - name: Build macOS .dmg
      if: matrix.os == 'macos-latest'
      run: |
        cd installer/macos
        chmod +x build_dmg.sh
        ./build_dmg.sh || echo "DMG build skipped"
      continue-on-error: true
    
    - name: Package source code
      run: |
        mkdir -p release
        cp -r src requirements.txt setup.py audacity_cloudai.py gui_launcher.py README.md LICENSE .env.example release/ || true
        cp -r "Start GUI.bat" "Start GUI.sh" install.bat install.sh release/ || true
        cp -r docs examples nyquist release/ || true
      shell: bash
      continue-on-error: true
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path release\* -DestinationPath AudacityCloudAI-Windows-${{ steps.version.outputs.tag }}.zip
      shell: pwsh
      continue-on-error: true
    
    - name: Create archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        tar -czf AudacityCloudAI-Linux-${{ steps.version.outputs.tag }}.tar.gz -C release .
      continue-on-error: true
    
    - name: Create archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        tar -czf AudacityCloudAI-macOS-${{ steps.version.outputs.tag }}.tar.gz -C release .
      continue-on-error: true
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: |
          *.zip
          *.tar.gz
          *.dmg
          dist/
        retention-days: 30
      continue-on-error: true

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release Notes
      run: |
        VERSION="${{ github.ref_name }}"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="v${{ github.event.inputs.version }}"
        fi
        cat > RELEASE_NOTES.md << EOF
        # Audacity Cloud AI ${VERSION}
        
        ## 🎉 What's New
        
        Full-featured AI audio plugin for Audacity with:
        - 🎤 Text-to-Speech (32+ languages)
        - 🎶 Music Generation
        - 🔊 Sound Effects
        - 🎧 Voice Isolation
        - 📝 Audio Transcription (99 languages)
        - 👥 Voice Library Browser
        
        ## 📦 Installation
        
        ### Quick Install (Recommended)
        
        **Windows:**
        1. Download `AudacityCloudAI-Windows-${{ github.ref_name }}.zip`
        2. Extract to a folder
        3. Run `install.bat`
        4. Double-click `Start GUI.bat`
        
        **Linux/macOS:**
        1. Download the appropriate `.tar.gz` file
        2. Extract: `tar -xzf AudacityCloudAI-*.tar.gz`
        3. Run: `./install.sh`
        4. Launch: `./Start GUI.sh`
        
        ### Manual Install
        
        ```bash
        pip install -r requirements.txt
        python gui_launcher.py
        ```
        
        ## 📚 Documentation
        
        - [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/QUICKSTART.md)
        - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md)
        - [GUI Guide](https://github.com/${{ github.repository }}/blob/main/GUI_README.md)
        - [Full Documentation](https://github.com/${{ github.repository }}/blob/main/README_EXTENDED.md)
        
        ## ⚡ Quick Start
        
        1. Get your ElevenLabs API key at https://elevenlabs.io
        2. Launch the GUI
        3. Enter your API key in the setup wizard
        4. Start generating audio!
        
        ## 🆕 Features in This Release
        
        - Complete CLI and GUI interfaces
        - All 6 major features implemented
        - Cross-platform support (Windows, macOS, Linux)
        - Comprehensive documentation
        - Voice Library browser
        - Setup wizard for easy configuration
        
        ## 📋 System Requirements
        
        - Python 3.8 or later
        - Internet connection
        - ElevenLabs API key
        - 100MB free disk space
        
        ## 🐛 Known Issues
        
        None reported yet! Please file issues on GitHub.
        
        ## 🙏 Credits
        
        Built with ElevenLabs Cloud APIs and love for the Audacity community.
        EOF
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Audacity Cloud AI ${{ steps.version.outputs.version }}
        files: |
          release-*/*.zip
          release-*/*.tar.gz
          release-*/*.dmg
          release-*/*.deb
          release-*/*.exe
          release-*/dist/*.whl
          release-*/dist/*.tar.gz
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    # Disabled for now - enable when ready to publish to PyPI
    if: false  # Change to: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/* || echo "PyPI upload skipped (no token configured)"
      continue-on-error: true
